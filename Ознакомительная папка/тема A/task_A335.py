# В классе 6 столов. На первом столе 1 яблоко, на втором - 2 яблока, на третьем - 3 и так далее.
# Дети входят в класс по одному. Они должны сесть за тот стол, за которым они получают больше всего яблок.
# Если есть выбор между двумя столами, они предпочтут сесть за стол, ближайший к двери 
# (первый стол - самый близкий, а шестой - самый дальний от двери).
# Написать функцию apple_share(n), которая для заданного числа детей n вернет список, показывающий, 
# сколько детей сидит за каждым столом. 
#  
# Пример
# apple_share(10) ==> [0, 1, 1, 2, 3, 3]
# Ребенок 1 садится за стол 6 (6 яблок). Ребенок 2 садится за стол 5 (5 яблок).
# Ребенок 3 садится за стол 4 (4 яблока). Ребенок 4 садится за стол 3 (3 яблока).
# Ребенок 5 садится за стол 6 (двое по 3 яблока). Ребенок 6 садится за стол 5 (двое по 2.5 яблока)
# Ребенок 7 садится за стол 2 (2 яблока). Ребенок 8 садится за стол 4 (двое по 2 яблока).
# Ребенок 9 садится за стол 6 (трое по 2 яблока). Ребенок 10 садится за стол 5 (трое по 1 и 2/3 яблока)


import traceback


def apple_share(n):
    ans = [0, 0, 0, 0, 0, 0, 0]
    tables = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
    ap = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
    an = [0, 0, 0, 0, 0, 0, 0]
    for g in range(n):
        for h in range(1, 7):
            an[h] = ans[h]
            ap[h] = tables[h]
        for i in range(1, 7):
            an[i] += 1
            ap[i] = ap[i] / an[i]
        tempint = ap.index(max(ap))
        ans[tempint] += 1

    ans.remove(0)
    return ans

# Тесты
try:
    assert apple_share(1) == [0, 0, 0, 0, 0, 1]
    assert apple_share(4) == [0, 0, 1, 1, 1, 1]
    assert apple_share(10) == [0, 1, 1, 2, 3, 3]
    assert apple_share(50) == [2, 5, 7, 10, 12, 14]
except AssertionError:
    print("TEST ERROR")
    traceback.print_exc()
else:
    print("TEST PASSED")
